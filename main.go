package main

import (
	"database/sql"
	"familytree/internal/auth"
	"familytree/internal/database"
	"familytree/internal/handlers"
	"log"
	"net/http"

	_ "github.com/lib/pq"
	"github.com/rs/cors"
)

var DB *sql.DB

func main() {
	database.ConnectDB()

	database.PrintUsers()

	// –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
	handlers.InitDatabase(database.DB)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodGet {
			http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
			return
		}
		http.ServeFile(w, r, "public/index.html")
	})
	mux.HandleFunc("/register", handlers.RegisterHandler)
	mux.HandleFunc("/login", handlers.LoginHandler)
	mux.HandleFunc("/api/modals", handlers.GetModalFiles)

	// üîπ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—â—ë–Ω–Ω—ã–π API
	mux.HandleFunc("/user", auth.AuthMiddleware(handlers.UserHandler))

	// –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	handler := cors.New(cors.Options{
		AllowedOrigins:   []string{"*"}, // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±–æ–≥–æ –¥–æ–º–µ–Ω–∞
		AllowedMethods:   []string{"GET", "POST", "OPTIONS"},
		AllowedHeaders:   []string{"Content-Type", "Authorization"},
		AllowCredentials: true,
	}).Handler(mux)

	log.Println("Server is running on http://localhost:8080")
	log.Fatal(http.ListenAndServe(":8080", handler))
}
